// Local Stalker-Portal to M3U Generator (Termux / Node.js)
const http = require('http');
const { URL } = require('url');
const fetch = global.fetch || require('node-fetch');
const crypto = require('crypto');

// ================= CONFIG =================
const config = {
    host: 'iptv.initv.de',
    mac_address: '00:1A:79:61:2D:BB',
    serial_number: '56EB7FA68778',
    device_id: '76C8FF8575442448A774C2E59098C02D0C209486B0FA9064CB193B7DC28789ED',
    device_id_2: '76C8FF8575442448A774C2E59098C02D0C209486B0FA9064CB193B7DC28789ED',
    stb_type: 'MAG250',
    api_signature: '263',
};

// ================= HELPERS =================
function logDebug(msg){ console.log(`${new Date().toISOString()} - ${msg}`); }
function randomHex(len=16){ return Array.from({length:len},()=>'0123456789abcdef'[Math.floor(Math.random()*16)]).join(''); }
function md5Hash(str){ return crypto.createHash('md5').update(str).digest('hex'); }

function normalizeConfig(){
    if(config.mac_address) config.mac_address = config.mac_address.trim();
    if(!config.serial_number) config.serial_number = randomHex(12).toUpperCase();
    if(!config.device_id) config.device_id = randomHex(32).toUpperCase();
    if(!config.device_id_2) config.device_id_2 = randomHex(32).toUpperCase();
}

function getHeaders(token=''){
    const headers = {
        'Cookie': `mac=${config.mac_address}; stb_lang=en; timezone=GMT`,
        'Referer': `http://${config.host}/stalker_portal/c/`,
        'User-Agent': 'Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 2 rev: 250 Safari/533.3',
        'X-User-Agent': `Model: ${config.stb_type}; Link: WiFi`
    };
    if(token) headers['Authorization'] = `Bearer ${token}`;
    return headers;
}

async function safeJSONFromResponse(resp,label=''){
    try{
        const txt = await resp.text();
        logDebug(`${label} response (first 500): ${txt.substring(0,500)}`);
        try{ return JSON.parse(txt); } catch { return {}; }
    } catch { return {}; }
}

async function fetchWithBackoff(url,options={},maxRetries=5){
    let delay = 1000;
    for(let attempt=1;attempt<=maxRetries;attempt++){
        try{
            const resp = await fetch(url,options);
            if(resp.status!==429) return resp;
            logDebug(`429 from ${url} â€“ retrying in ${delay}ms (attempt ${attempt})`);
        } catch(e){ logDebug(`fetch error: ${e.message}`); }
        await new Promise(r=>setTimeout(r,delay));
        delay*=2;
    }
    return fetch(url,options);
}

// ================= TOKEN & ACCOUNT =================
async function generateHardware(){
    normalizeConfig();
    config.hw_version = '1.7-BD-'+md5Hash(config.mac_address).substring(0,2).toUpperCase();
    config.hw_version_2 = md5Hash((config.serial_number+config.mac_address).toLowerCase());
}

async function getToken(){
    const url = `http://${config.host}/stalker_portal/server/load.php?type=stb&action=handshake&token=&JsHttpRequest=1-xml`;
    const resp = await fetchWithBackoff(url,{headers:getHeaders()});
    if(!resp.ok) return '';
    const data = await safeJSONFromResponse(resp,'getToken');
    return data.js?.token || '';
}

async function auth(token){
    const metrics = encodeURIComponent(JSON.stringify({mac:config.mac_address,model:config.stb_type,type:'STB',sn:config.serial_number}));
    const url = `http://${config.host}/stalker_portal/server/load.php?type=stb&action=get_profile&sn=${config.serial_number}&stb_type=${config.stb_type}&device_id=${config.device_id}&device_id2=${config.device_id_2}&hw_version=${encodeURIComponent(config.hw_version)}&hw_version_2=${config.hw_version_2}&metrics=${metrics}&JsHttpRequest=1-xml`;
    const resp = await fetchWithBackoff(url,{headers:getHeaders(token)});
    if(!resp.ok) return {};
    const data = await safeJSONFromResponse(resp,'auth');
    return data.js || {};
}

async function getAccountInfo(token){
    const url = `http://${config.host}/stalker_portal/server/load.php?type=account_info&action=get_main_info&JsHttpRequest=1-xml`;
    const resp = await fetchWithBackoff(url,{headers:getHeaders(token)});
    if(!resp.ok) return {};
    const data = await safeJSONFromResponse(resp,'getAccountInfo');
    return data.js || {};
}

async function getGenres(token){
    const url = `http://${config.host}/stalker_portal/server/load.php?type=itv&action=get_genres&JsHttpRequest=1-xml`;
    const resp = await fetchWithBackoff(url,{headers:getHeaders(token)});
    if(!resp.ok) return [];
    const data = await safeJSONFromResponse(resp,'getGenres');
    return data.js || [];
}

async function getChannels(token){
    const url = `http://${config.host}/stalker_portal/server/load.php?type=itv&action=get_all_channels&JsHttpRequest=1-xml`;
    const resp = await fetchWithBackoff(url,{headers:getHeaders(token)});
    if(!resp.ok) return [];
    const data = await safeJSONFromResponse(resp,'get_all_channels');
    let channels = [];
    if(data.js?.data){
        const raw = data.js.data;
        if(Array.isArray(raw)) channels = raw;
        else channels = Object.values(raw);
    }
    return channels.map(ch=>({
        id: ch.id || ch.cmd || 'unknown',
        name: ch.name || 'Unknown',
        logo: ch.logo || '',
        tvgid: ch.xmltv_id || '',
        genre_id: ch.tv_genre_id || ''
    }));
}

async function genToken(){
    await generateHardware();
    const token = await getToken();
    if(!token) return {token:'', profile:{}, account_info:{}, genres:[], channels:[]};
    const profile = await auth(token);
    const account_info = await getAccountInfo(token);
    const genres = await getGenres(token);
    const channels = await getChannels(token);

    // Map genre title
    const genreMap = {};
    genres.forEach(g=>{ if(g?.id!==undefined) genreMap[g.id]=g.title||'Other'; });
    channels.forEach(ch=>ch.title = genreMap[ch.genre_id]||'Other');

    return {token, profile, account_info, genres, channels};
}

// ================= M3U =================
async function convertJsonToM3U(channels=[], profile={}, account_info={}, reqUrl='http://localhost'){
    const m3u = ['#EXTM3U', `# Total Channels => ${channels.length}`, ''];
    channels.forEach(ch=>{
        const stream = `${reqUrl}/${ch.id}.m3u8`;
        m3u.push(`#EXTINF:-1 tvg-id="${ch.tvgid}" tvg-name="${ch.name}" tvg-logo="${ch.logo}" group-title="${ch.title}",${ch.name}`);
        m3u.push(stream);
    });
    return m3u.join('\n');
}

// ================= HTTP SERVER =================
const server = http.createServer(async (req,res)=>{
    const url = new URL(req.url, `http://${req.headers.host}`);
    logDebug(`Request URL: ${url.pathname}`);

    if(url.pathname==='/playlist.m3u8'){
        const {token, profile, account_info, channels} = await genToken();
        if(!token){ res.writeHead(500); res.end('Token generation failed'); return; }
        const m3u = await convertJsonToM3U(channels, profile, account_info, `http://${req.headers.host}`);
        res.writeHead(200,{'Content-Type':'application/vnd.apple.mpegurl'});
        res.end(m3u);
        return;
    }

    res.writeHead(404); res.end('Not Found');
});

server.listen(8080,()=>logDebug('Server running at http://localhost:8080/playlist.m3u8'));
