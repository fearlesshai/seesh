// worker.cjs â€” Stalker-Portal To M3U Generator (CommonJS)
// Created by @tg_aadi, Hardened + 429/backoff

const http = require('http');
const fetch = require('node-fetch'); // Make sure node-fetch installed: npm i node-fetch@2

// ================= CONFIG =================
const config = {
    host: 'iptv.initv.de',
    mac_address: '00:1A:79:61:2D:BB',
    serial_number: '56EB7FA68778',
    device_id: '76C8FF8575442448A774C2E59098C02D0C209486B0FA9064CB193B7DC28789ED',
    device_id_2: '76C8FF8575442448A774C2E59098C02D0C209486B0FA9064CB193B7DC28789ED',
    stb_type: 'MAG250',
    api_signature: '263',
};

// ================= HELPERS =================
function logDebug(msg) { console.log(`${new Date().toISOString()} - ${msg}`); }
function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }
function randomHex(len) {
    const chars = '0123456789abcdef';
    let out = '';
    for (let i = 0; i < len; i++) out += chars[Math.floor(Math.random() * chars.length)];
    return out;
}

// Fetch wrapper with 429 backoff
async function fetchWithBackoff(url, options = {}, maxRetries = 5, delay = 1000) {
    for (let i = 0; i < maxRetries; i++) {
        try {
            const resp = await fetch(url, options);
            if (resp.status !== 429) return resp;
            logDebug(`429 from ${url}, retrying in ${delay}ms (attempt ${i+1})`);
        } catch(e) { logDebug(`fetch error: ${e.message}`); }
        await sleep(delay);
        delay *= 2;
    }
    return fetch(url, options);
}

function getHeaders(token = '') {
    const headers = {
        'Cookie': `mac=${config.mac_address}; stb_lang=en; timezone=GMT`,
        'Referer': `http://${config.host}/stalker_portal/c/`,
        'User-Agent': 'Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 2 rev: 250 Safari/533.3',
        'X-User-Agent': `Model: ${config.stb_type}; Link: WiFi`
    };
    if (token) headers['Authorization'] = `Bearer ${token}`;
    return headers;
}

async function safeJSON(resp, label='') {
    try {
        const text = await resp.text();
        logDebug(`${label} (first 500 chars): ${text.substring(0,500)}`);
        return JSON.parse(text);
    } catch(e) { logDebug(`${label} JSON parse error: ${e.message}`); return {}; }
}

// ================= TOKEN & AUTH =================
async function getToken() {
    const url = `http://${config.host}/stalker_portal/server/load.php?type=stb&action=handshake&token=&JsHttpRequest=1-xml`;
    const resp = await fetchWithBackoff(url, { headers: getHeaders() });
    if (!resp.ok) return '';
    const data = await safeJSON(resp, 'getToken');
    return data.js?.token || '';
}

async function auth(token) {
    const url = `http://${config.host}/stalker_portal/server/load.php?type=stb&action=get_profile&stb_type=${config.stb_type}&device_id=${config.device_id}&device_id2=${config.device_id_2}&JsHttpRequest=1-xml`;
    const resp = await fetchWithBackoff(url, { headers: getHeaders(token) });
    if (!resp.ok) return {};
    const data = await safeJSON(resp, 'auth');
    return data.js || {};
}

async function getGenres(token) {
    const url = `http://${config.host}/stalker_portal/server/load.php?type=itv&action=get_genres&JsHttpRequest=1-xml`;
    const resp = await fetchWithBackoff(url, { headers: getHeaders(token) });
    if (!resp.ok) return [];
    const data = await safeJSON(resp, 'getGenres');
    return data.js || [];
}

async function getAllChannels(token) {
    const url = `http://${config.host}/stalker_portal/server/load.php?type=itv&action=get_all_channels&JsHttpRequest=1-xml`;
    const resp = await fetchWithBackoff(url, { headers: getHeaders(token) });
    if (!resp.ok) return {};
    return await safeJSON(resp, 'get_all_channels');
}

async function getStreamURL(id, token) {
    const cmdPayload = encodeURIComponent(`ffrt http://localhost/ch/${id}`);
    const url = `http://${config.host}/stalker_portal/server/load.php?type=itv&action=create_link&cmd=${cmdPayload}&JsHttpRequest=1-xml`;
    const resp = await fetchWithBackoff(url, { headers: getHeaders(token) });
    if (!resp.ok) return '';
    const data = await safeJSON(resp, 'getStreamURL');
    let stream = data.js?.cmd || (Array.isArray(data.js) ? data.js[0]?.cmd : '');
    if (!stream) return '';
    return stream.replace(/^ffrt\s+/i,'').trim();
}

async function genToken() {
    const token = await getToken();
    if (!token) { logDebug('Failed to get token'); return {token:'', profile:{}}; }
    const profile = await auth(token);
    const genres = await getGenres(token);
    return { token, profile, genres };
}

// ================= M3U GENERATOR =================
function buildM3U(channels, origin='http://localhost:8080') {
    const m3u = ['#EXTM3U', `# Total Channels: ${channels.length}`, ''];
    channels.forEach((ch, idx)=>{
        const url = `${origin}/${ch.id}.m3u8`;
        m3u.push(`#EXTINF:-1 tvg-id="${ch.tvgid}" tvg-name="${ch.name}" tvg-logo="${ch.logo}" group-title="${ch.title}",${ch.name}`);
        m3u.push(url);
        if(idx<5) logDebug(`M3U Channel #${idx}: ${ch.name}, URL: ${url}`);
    });
    return m3u.join('\n');
}

// ================= HTTP SERVER =================
const server = http.createServer(async (req, res) => {
    const url = new URL(req.url, `http://${req.headers.host}`);
    const path = url.pathname;

    try {
        const { token, profile, genres } = await genToken();
        if (!token) return res.end('Token generation failed');

        if(path === '/playlist.m3u8') {
            const allCh = await getAllChannels(token);
            let channels = [];
            if(allCh.js?.data){
                channels = Array.isArray(allCh.js.data) ? allCh.js.data : Object.values(allCh.js.data);
                channels = channels.map(c=>({ name:c.name||'Unknown', id:c.id||c.tv_genre_id||'unknown', tvgid:c.xmltv_id||'', logo:c.logo||'', title:c.name||'Other' }));
            }
            const m3u = buildM3U(channels);
            res.writeHead(200, {'Content-Type':'application/vnd.apple.mpegurl'});
            return res.end(m3u);
        }

        if(path.endsWith('.m3u8') && path !== '/playlist.m3u8') {
            const id = path.replace(/\.m3u8$/,'').replace('/','');
            const stream = await getStreamURL(id, token);
            if(!stream) { res.writeHead(500); return res.end('No stream'); }
            res.writeHead(302, { Location: stream });
            return res.end();
        }

        res.writeHead(404); res.end('Not Found');
    } catch(e) {
        logDebug(`Unexpected error: ${e.message}`);
        res.writeHead(500); res.end(`Error: ${e.message}`);
    }
});

server.listen(8080, ()=>logDebug('Server running at http://localhost:8080'));
