// stalker-termux-worker.js
import http from 'http';
import fetch from 'node-fetch';
import { URL } from 'url';

// ---------------- CONFIG ----------------
const config = {
    host: 'iptv.initv.de',
    mac_address: '00:1A:79:61:2D:BB',
    serial_number: '56EB7FA68778C',
    device_id: '76C8FF8575442448A774C2E59098C02D0C209486B0FA9064CB193B7DC28789ED',
    device_id_2: '76C8FF8575442448A774C2E59098C02D0C209486B0FA9064CB193B7DC28789ED',
    stb_type: 'MAG250',
    api_signature: '263'
};

// --------- Debug helper ----------
function logDebug(msg) { console.log(`${new Date().toISOString()} - ${msg}`); }

// --------- Headers ----------
function getHeaders(token = '') {
    const h = {
        'Cookie': `mac=${config.mac_address}; stb_lang=en; timezone=GMT`,
        'User-Agent': 'Mozilla/5.0 (QtEmbedded; U; Linux; C) MAG200 stbapp ver:2 Safari/533.3',
        'X-User-Agent': `Model:${config.stb_type}; Link: WiFi`,
        'Referer': `http://${config.host}/stalker_portal/c/`
    };
    if (token) h['Authorization'] = `Bearer ${token}`;
    return h;
}

// --------- Fetch wrapper with 429 backoff ----------
async function fetchWithBackoff(url, options = {}, maxRetries = 5, delayMs = 1000) {
    let delay = delayMs;
    for (let i = 0; i < maxRetries; i++) {
        try {
            const resp = await fetch(url, options);
            if (resp.status !== 429) return resp;
            logDebug(`429 from ${url} â€“ retrying in ${delay}ms (attempt ${i+1})`);
        } catch (e) { logDebug(`Fetch error: ${e.message}`); }
        await new Promise(r => setTimeout(r, delay));
        delay *= 2;
    }
    return fetch(url, options);
}

// --------- Channel cache ----------
let cachedChannels = []; // {id, cmd, name, title, logo}

// --------- Token + Profile Generation ----------
async function genToken() {
    // Simplified handshake + auth
    const tokenResp = await fetchWithBackoff(`http://${config.host}/stalker_portal/server/load.php?type=stb&action=handshake&token=&JsHttpRequest=1-xml`, { headers: getHeaders() });
    const data = await tokenResp.json().catch(() => ({}));
    const token = data.js?.token || '';
    return { token, profile: {}, account_info: {} };
}

// --------- Fetch channels and cache ----------
async function loadChannels(token) {
    const url = `http://${config.host}/stalker_portal/server/load.php?type=itv&action=get_all_channels&JsHttpRequest=1-xml`;
    const resp = await fetchWithBackoff(url, { headers: getHeaders(token) });
    const data = await resp.json().catch(() => ({}));
    const rawChannels = data.js?.data || [];
    cachedChannels = Array.isArray(rawChannels) ? rawChannels : Object.values(rawChannels);
}

// --------- Generate playlist M3U ----------
async function generatePlaylist(origin) {
    let lines = ['#EXTM3U', `# Total Channels => ${cachedChannels.length}`, ''];
    cachedChannels.forEach(ch => {
        const id = ch.cmd.replace(/^ffrt\s+/, '').trim() || 'unknown';
        const logo = ch.logo ? `http://${config.host}/stalker_portal/misc/logos/320/${ch.logo}` : '';
        const group = ch.title || 'Other';
        lines.push(`#EXTINF:-1 tvg-id="${ch.xmltv_id}" tvg-name="${ch.name}" tvg-logo="${logo}" group-title="${group}",${ch.name}`);
        lines.push(`${origin}/${id}.m3u8`);
    });
    return lines.join('\n');
}

// --------- Stream proxy ----------
async function proxyStream(res, cmd) {
    const streamUrl = cmd.replace(/^ffrt\s+/, '').trim();
    const resp = await fetch(streamUrl);
    res.writeHead(resp.status, { 'Content-Type': resp.headers.get('content-type') || 'application/vnd.apple.mpegurl' });
    resp.body.pipe(res);
}

// --------- HTTP server ----------
const server = http.createServer(async (req, res) => {
    const url = new URL(req.url, `http://${req.headers.host}`);
    const lastPart = url.pathname.split('/').pop();
    const origin = `http://${req.headers.host}`;

    try {
        const { token } = await genToken();
        if (!cachedChannels.length) await loadChannels(token);

        if (url.pathname === '/playlist.m3u8') {
            const m3u = await generatePlaylist(origin);
            res.writeHead(200, { 'Content-Type': 'application/vnd.apple.mpegurl' });
            res.end(m3u);
            return;
        }

        if (lastPart.endsWith('.m3u8') && lastPart !== 'playlist.m3u8') {
            const ch = cachedChannels.find(c => c.cmd.includes(lastPart.replace('.m3u8','')));
            if (!ch) { res.writeHead(404); res.end('Channel not found'); return; }
            await proxyStream(res, ch.cmd);
            return;
        }

        res.writeHead(404); res.end('Not Found');

    } catch (e) {
        logDebug(`Error: ${e.message}`);
        res.writeHead(500); res.end('Internal Server Error');
    }
});

server.listen(8080, () => logDebug('Server running at http://localhost:8080'));
