// worker.js (ESM, Termux-ready)
// Stalker-Portal to M3U generator (Hardened + 429 backoff)

import fetch from 'node-fetch';
import http from 'http';
import { URL } from 'url';
import crypto from 'crypto';

// ==================== CONFIG ====================
const config = {
    host: 'iptv.initv.de',
    mac_address: '00:1A:79:61:2D:BB',
    serial_number: '56EB7FA68778',
    device_id: '76C8FF8575442448A774C2E59098C02D0C209486B0FA9064CB193B7DC28789ED',
    device_id_2: '76C8FF8575442448A774C2E59098C02D0C209486B0FA9064CB193B7DC28789ED',
    stb_type: 'MAG250',
    api_signature: '263',
};

// ==================== HELPERS ====================
function logDebug(msg) {
    console.log(`${new Date().toISOString()} - ${msg}`);
}

function randomHex(len = 16) {
    const chars = '0123456789abcdef';
    let out = '';
    for (let i = 0; i < len; i++) out += chars[Math.floor(Math.random() * chars.length)];
    return out;
}

function md5Hex(str) {
    return crypto.createHash('md5').update(str).digest('hex');
}

async function safeJSONFromResponse(response, label = '') {
    try {
        const text = await response.text();
        logDebug(`${label} response (first 500 chars): ${text.substring(0, 500)}`);
        try {
            return JSON.parse(text);
        } catch (parseErr) {
            logDebug(`${label} JSON parse error: ${parseErr.message}`);
            return {};
        }
    } catch (e) {
        logDebug(`${label} read/text error: ${e.message}`);
        return {};
    }
}

function normalizeConfig() {
    if (config.mac_address) config.mac_address = config.mac_address.trim();
    if (!config.serial_number) config.serial_number = randomHex(12).toUpperCase();
    if (!config.device_id) config.device_id = randomHex(32).toUpperCase();
    if (!config.device_id_2) config.device_id_2 = randomHex(32).toUpperCase();
}

function getHeaders(token = '') {
    const headers = {
        'Cookie': `mac=${config.mac_address}; stb_lang=en; timezone=GMT`,
        'Referer': `http://${config.host}/stalker_portal/c/`,
        'User-Agent': 'Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 2 rev: 250 Safari/533.3',
        'X-User-Agent': `Model: ${config.stb_type}; Link: WiFi`
    };
    if (token) headers['Authorization'] = `Bearer ${token}`;
    return headers;
}

async function fetchWithBackoff(url, options = {}, maxRetries = 5, startDelayMs = 1000) {
    let delay = startDelayMs;
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const resp = await fetch(url, options);
            if (resp.status !== 429) return resp;
            logDebug(`429 from ${url} â€“ retrying in ${delay}ms (attempt ${attempt})`);
        } catch (e) {
            logDebug(`fetch error for ${url}: ${e.message} (attempt ${attempt})`);
        }
        await new Promise(r => setTimeout(r, delay));
        delay *= 2;
    }
    return fetch(url, options);
}

// ==================== HARDWARE & TOKEN ====================
async function generateHardwareVersions() {
    normalizeConfig();
    config.hw_version = '1.7-BD-' + md5Hex(config.mac_address).substring(0, 2).toUpperCase();
    config.hw_version_2 = md5Hex((config.serial_number + config.mac_address).toLowerCase());
    logDebug(`hw_version: ${config.hw_version}, hw_version_2: ${config.hw_version_2}`);
}

async function getToken() {
    const url = `http://${config.host}/stalker_portal/server/load.php?type=stb&action=handshake&token=&JsHttpRequest=1-xml`;
    try {
        logDebug(`Fetching token from ${url}`);
        const response = await fetchWithBackoff(url, { headers: getHeaders() });
        if (!response.ok) return '';
        const data = await safeJSONFromResponse(response, 'getToken');
        return data.js?.token || '';
    } catch (e) { logDebug(`Error in getToken: ${e.message}`); return ''; }
}

async function auth(token) {
    const metrics = { mac: config.mac_address, model: config.stb_type, type: 'STB', uid: '', sn: config.serial_number, random: '' };
    const metricsEncoded = encodeURIComponent(JSON.stringify(metrics));
    const url = `http://${config.host}/stalker_portal/server/load.php?type=stb&action=get_profile&hd=1&num_banks=2&sn=${config.serial_number}&stb_type=${config.stb_type}&device_id=${config.device_id}&device_id2=${config.device_id_2}&hw_version=${encodeURIComponent(config.hw_version)}&hw_version_2=${config.hw_version_2}&JsHttpRequest=1-xml&metrics=${metricsEncoded}`;
    try {
        const resp = await fetchWithBackoff(url, { headers: getHeaders(token) });
        if (!resp.ok) return {};
        const data = await safeJSONFromResponse(resp, 'auth');
        return data.js || {};
    } catch (e) { logDebug(`Error in auth: ${e.message}`); return {}; }
}

async function handShake(token) {
    const url = `http://${config.host}/stalker_portal/server/load.php?type=stb&action=handshake&token=${token}&JsHttpRequest=1-xml`;
    try {
        const resp = await fetchWithBackoff(url, { headers: getHeaders(token) });
        if (!resp.ok) return '';
        const data = await safeJSONFromResponse(resp, 'handShake');
        return data.js?.token || '';
    } catch (e) { logDebug(`Error in handShake: ${e.message}`); return ''; }
}

async function getAccountInfo(token) {
    const url = `http://${config.host}/stalker_portal/server/load.php?type=account_info&action=get_main_info&JsHttpRequest=1-xml`;
    try {
        const resp = await fetchWithBackoff(url, { headers: getHeaders(token) });
        if (!resp.ok) return {};
        const data = await safeJSONFromResponse(resp, 'getAccountInfo');
        return data.js || {};
    } catch (e) { logDebug(`Error in getAccountInfo: ${e.message}`); return {}; }
}

async function getGenres(token) {
    const url = `http://${config.host}/stalker_portal/server/load.php?type=itv&action=get_genres&JsHttpRequest=1-xml`;
    try {
        const resp = await fetchWithBackoff(url, { headers: getHeaders(token) });
        if (!resp.ok) return [];
        const data = await safeJSONFromResponse(resp, 'getGenres');
        return data.js || [];
    } catch (e) { logDebug(`Error in getGenres: ${e.message}`); return []; }
}

async function getStreamURL(id, token) {
    const cmdPayload = encodeURIComponent(`ffrt http://localhost/ch/${id}`);
    const url = `http://${config.host}/stalker_portal/server/load.php?type=itv&action=create_link&cmd=${cmdPayload}&JsHttpRequest=1-xml`;
    try {
        const resp = await fetchWithBackoff(url, { headers: getHeaders(token) });
        if (!resp.ok) return '';
        const data = await safeJSONFromResponse(resp, 'getStreamURL');
        let stream = '';
        if (data.js) stream = data.js.cmd || (Array.isArray(data.js) ? data.js[0]?.cmd || '' : '');
        return stream.replace(/^ffrt\s+/i, '').trim();
    } catch (e) { logDebug(`Error in getStreamURL: ${e.message}`); return ''; }
}

async function genToken() {
    await generateHardwareVersions();
    const token = await getToken();
    if (!token) return { token:'', profile:{}, account_info:{} };
    const profile = await auth(token);
    let newToken = await handShake(token) || token;
    const account_info = await getAccountInfo(newToken);
    return { token: newToken, profile, account_info };
}

// ==================== HTTP SERVER ====================
async function convertJsonToM3U(channels, profile, account_info, request) {
    let m3u = ['#EXTM3U', `# Total Channels => ${channels.length}`, '# Script => @tg_aadi',''];
    const origin = `http://localhost:8080`;

    channels.forEach((ch,i) => {
        const real_cmd = (ch.cmd || `unknown`).replace(/ffrt\s+http:\/\/localhost\/ch\//i,'').trim();
        m3u.push(`#EXTINF:-1 tvg-name="${ch.name}" tvg-id="${ch.tvgid}" group-title="${ch.title}",${ch.name}`);
        m3u.push(`${origin}/${real_cmd}.m3u8`);
        if(i<5) logDebug(`M3U Channel #${i}: ${ch.name} -> ${origin}/${real_cmd}.m3u8`);
    });
    return m3u.join('\n');
}

async function handleRequest(req, res) {
    try {
        const url = new URL(req.url, `http://${req.headers.host}`);
        const pathParts = url.pathname.split('/');
        const lastPart = pathParts[pathParts.length-1];

        const { token, profile, account_info } = await genToken();
        if(!token) return res.end('Token generation failed');

        if(url.pathname === '/playlist.m3u8') {
            const channelsUrl = `http://${config.host}/stalker_portal/server/load.php?type=itv&action=get_all_channels&JsHttpRequest=1-xml`;
            const resp = await fetchWithBackoff(channelsUrl,{ headers:getHeaders(token)});
            const data = await safeJSONFromResponse(resp,'get_all_channels');
            let channels = [];
            if(data.js?.data) channels = Array.isArray(data.js.data)?data.js.data:Object.values(data.js.data);
            const genres = await getGenres(token);
            const groupTitleMap = {};
            (genres||[]).forEach(g=>{if(g?.id!==undefined)groupTitleMap[g.id]=g.title||'Other'});
            channels = channels.map(ch=>({...ch,title:groupTitleMap[ch.tv_genre_id]||'Other'}));
            const m3u = await convertJsonToM3U(channels, profile, account_info, req);
            res.writeHead(200,{'Content-Type':'application/vnd.apple.mpegurl'});
            return res.end(m3u);
        }

        if(lastPart.endsWith('.m3u8') && lastPart!=='playlist.m3u8') {
            const id = lastPart.replace(/\.m3u8$/,'');
            const stream = await getStreamURL(id, token);
            if(!stream){ res.writeHead(500); return res.end('No stream'); }
            res.writeHead(302,{Location: stream});
            return res.end();
        }

        res.writeHead(404); res.end('Not Found');
    } catch(e){ logDebug(`Unexpected error: ${e.message}`); res.writeHead(500); res.end('Internal Server Error'); }
}

const server = http.createServer(handleRequest);
server.listen(8080,()=>logDebug('Server running at http://localhost:8080'));
