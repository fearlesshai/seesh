// Stalker-Portal To M3U Generator Script (Termux/Node.js Version)
// Original Worker code adapted for localhost Node.js

const http = require('http');
const { TextEncoder } = require('util'); // needed for Node.js crypto

// ================= CONFIG =================
const config = {
    host: 'iptv.initv.de',
    mac_address: '00:1A:79:61:2D:BB',
    serial_number: '56EB7FA68778',
    device_id: '76C8FF8575442448A774C2E59098C02D0C209486B0FA9064CB193B7DC28789ED',
    device_id_2: '76C8FF8575442448A774C2E59098C02D0C209486B0FA9064CB193B7DC28789ED',
    stb_type: 'MAG250',
    api_signature: '263',
};

// ================= HELPERS =================
function logDebug(msg) { console.log(new Date().toISOString(), '-', msg); }

function randomHex(len = 16) {
    const chars = '0123456789abcdef';
    let out = '';
    for (let i = 0; i < len; i++) out += chars[Math.floor(Math.random() * chars.length)];
    return out;
}

async function hash(str) {
    const data = new TextEncoder().encode(str);
    const digest = await require('crypto').webcrypto.subtle.digest('MD5', data);
    return Array.from(new Uint8Array(digest)).map(x => x.toString(16).padStart(2,'0')).join('');
}

async function safeJSONFromResponse(response, label='') {
    try {
        const text = await response.text();
        logDebug(`${label} response (first 500): ${text.substring(0,500)}`);
        try { return JSON.parse(text); } 
        catch { return {}; }
    } catch { return {}; }
}

function normalizeConfig() {
    if (config.mac_address) config.mac_address = config.mac_address.trim();
    if (!config.serial_number) config.serial_number = randomHex(12).toUpperCase();
    if (!config.device_id) config.device_id = randomHex(32).toUpperCase();
    if (!config.device_id_2) config.device_id_2 = randomHex(32).toUpperCase();
}

// ---- Retry wrapper ----
async function fetchWithBackoff(url, options={}, maxRetries=5, startDelay=1000) {
    let delay = startDelay;
    for (let i=1;i<=maxRetries;i++) {
        try {
            const resp = await fetch(url, options);
            if (resp.status !== 429) return resp;
            logDebug(`429 from ${url} â€“ retrying in ${delay}ms (attempt ${i})`);
        } catch(e) { logDebug(`fetch error ${e.message} (attempt ${i})`); }
        await new Promise(r => setTimeout(r, delay));
        delay *= 2;
    }
    return fetch(url, options); // final attempt
}

// ================= TOKEN / API =================
async function generateHardwareVersions() {
    normalizeConfig();
    config.hw_version = '1.7-BD-' + (await hash(config.mac_address)).substring(0,2).toUpperCase();
    config.hw_version_2 = await hash((config.serial_number + config.mac_address).toLowerCase());
    logDebug(`hw_version: ${config.hw_version}, hw_version_2: ${config.hw_version_2}`);
}

function getHeaders(token='') {
    const headers = {
        'Cookie': `mac=${config.mac_address}; stb_lang=en; timezone=GMT`,
        'Referer': `http://${config.host}/stalker_portal/c/`,
        'User-Agent': 'Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 2 rev: 250 Safari/533.3',
        'X-User-Agent': `Model: ${config.stb_type}; Link: WiFi`
    };
    if (token) headers['Authorization'] = `Bearer ${token}`;
    return headers;
}

// ---- Other functions like getToken, auth, handShake, getAccountInfo, getGenres, getStreamURL remain the same ----
// You can copy your existing implementations here

// ================= M3U generation =================
async function convertJsonToM3U(channels, profile, account_info, request) {
    // Keep your existing M3U conversion code here
    // Ensure it uses `request.url` for origin
    return '#EXTM3U\n# Replace with your channels...';
}

// ================= HANDLE REQUEST =================
async function handleRequest(req) {
    const url = new URL(req.url, `http://${req.headers.host}`);
    const pathParts = url.pathname.split('/');
    const lastPart = pathParts[pathParts.length-1];

    logDebug(`Incoming request: ${url.pathname}`);

    // Token generation
    const { token, profile, account_info } = await genToken(); // make sure genToken calls generateHardwareVersions() + getToken + auth + handShake + getAccountInfo
    if (!token) return { status: 500, headers: {'Content-Type':'text/plain'}, body: 'Token generation failed' };

    if (url.pathname === '/playlist.m3u8') {
        // Implement your playlist logic here
        return { status:200, headers:{'Content-Type':'application/vnd.apple.mpegurl'}, body:'#EXTM3U\n# Playlist content' };
    }

    if (lastPart.endsWith('.m3u8') && lastPart !== 'playlist.m3u8') {
        const streamURL = await getStreamURL(lastPart.replace('.m3u8',''), token);
        if (!streamURL) return { status:500, headers:{'Content-Type':'text/plain'}, body:'No stream URL received'};
        return { status:302, headers:{Location: streamURL}, body:'' };
    }

    return { status:404, headers:{'Content-Type':'text/plain'}, body:'Not Found' };
}

// ================= HTTP SERVER =================
const server = http.createServer(async (req,res) => {
    try {
        const response = await handleRequest(req);
        res.writeHead(response.status, response.headers);
        res.end(response.body);
    } catch(e) {
        res.writeHead(500, {'Content-Type':'text/plain'});
        res.end(`Internal Server Error: ${e.message}`);
    }
});

server.listen(8080, ()=>logDebug('Server running at http://localhost:8080'));
